<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharedKernel.Domain</name>
    </assembly>
    <members>
        <member name="T:SharedKernel.Domain.Aggregates.AggregateRoot`1">
            <summary>
            This root aggregate contains your domain identifier and events
            </summary>
            <typeparam name="TKey">The data type of the identifier</typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Aggregates.AggregateRoot`1.#ctor">
            <summary>
            Aggregate Root constructor for ORMs
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Aggregates.AggregateRoot`1.#ctor(`0)">
            <summary>
            Aggregate Root constructor
            </summary>
            <param name="id">The identifier</param>
        </member>
        <member name="M:SharedKernel.Domain.Aggregates.AggregateRoot`1.PullDomainEvents">
            <summary>
            Extracts the domain events that have the root aggregate
            </summary>
            <returns>All domain events recordered</returns>
        </member>
        <member name="M:SharedKernel.Domain.Aggregates.AggregateRoot`1.Record(SharedKernel.Domain.Events.DomainEvent)">
            <summary>
            Stores a domain event for later extraction
            </summary>
            <param name="domainEvent"></param>
        </member>
        <member name="T:SharedKernel.Domain.Aggregates.AggregateRootAuditable`1">
            <summary>
            Root aggregate with creation and modification audit
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Aggregates.AggregateRootAuditable`1.#ctor">
            <summary>
            Aggregate Root Auditable constructor for ORMs
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Aggregates.AggregateRootAuditable`1.#ctor(`0,System.DateTime,System.Guid)">
            <summary>
            Aggregate Root Auditable Constructor
            </summary>
            <param name="id">Identifier</param>
            <param name="createdAt">Creation Date</param>
            <param name="createdBy">Creation user identifier</param>
        </member>
        <member name="P:SharedKernel.Domain.Aggregates.AggregateRootAuditable`1.CreatedBy">
            <summary>
            Creator user identifier
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Aggregates.AggregateRootAuditable`1.CreatedAt">
            <summary>
            Creation date
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Aggregates.AggregateRootAuditable`1.LastModifiedBy">
            <summary>
            Modifier user identifier
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Aggregates.AggregateRootAuditable`1.LastModifiedAt">
            <summary>
            Modification date
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Aggregates.AggregateRootAuditable`1.Create(System.DateTime,System.Guid)">
            <summary>
            Sets the creation auditable properties
            </summary>
            <param name="createdAt"></param>
            <param name="createdBy"></param>
        </member>
        <member name="M:SharedKernel.Domain.Aggregates.AggregateRootAuditable`1.Change(System.DateTime,System.Guid)">
            <summary>
            Sets the modification auditable properties
            </summary>
            <param name="lastModifiedAt"></param>
            <param name="lastModifiedBy"></param>
        </member>
        <member name="T:SharedKernel.Domain.Aggregates.AggregateRootAuditableLogicalRemove`1">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:SharedKernel.Domain.Aggregates.AggregateRootAuditableLogicalRemove`1.DeletedBy">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Aggregates.AggregateRootAuditableLogicalRemove`1.DeletedAt">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Aggregates.AggregateRootAuditableLogicalRemove`1.Delete(System.DateTime,System.Guid)">
            <summary>
            
            </summary>
            <param name="deletedAt"></param>
            <param name="deletedBy"></param>
        </member>
        <member name="M:SharedKernel.Domain.Aggregates.AggregateRootAuditableLogicalRemove`1.Restore">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedKernel.Domain.Aggregates.AggregateRootIsTranslatable`5">
            <summary>
            
            </summary>
            <typeparam name="TEntityKey"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TTranslation"></typeparam>
            <typeparam name="TLanguage"></typeparam>
            <typeparam name="TLanguageKey"></typeparam>
        </member>
        <member name="P:SharedKernel.Domain.Aggregates.AggregateRootIsTranslatable`5.Translations">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Aggregates.AggregateRootIsTranslatable`5.AddTranslation(`2)">
            <summary>
            
            </summary>
            <param name="translation"></param>
        </member>
        <member name="T:SharedKernel.Domain.Aggregates.AggregateRootIsTranslatable`4">
            <summary>
            
            </summary>
            <typeparam name="TEntityKey"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TTranslation"></typeparam>
            <typeparam name="TLanguage"></typeparam>
        </member>
        <member name="T:SharedKernel.Domain.Aggregates.AggregateRootIsTranslatable`3">
            <summary>
            
            </summary>
            <typeparam name="TEntityKey"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TTranslation"></typeparam>
        </member>
        <member name="T:SharedKernel.Domain.Aggregates.IAggregateRoot">
            <summary>
            This root aggregate contains your domain identifier and events
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Aggregates.IAggregateRoot.PullDomainEvents">
            <summary>
            Extracts the domain events that have the root aggregate
            </summary>
            <returns>All domain events recordered</returns>
        </member>
        <member name="T:SharedKernel.Domain.Entities.AuditChange">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Entities.AuditChange.Create(System.Guid,System.String,System.String,System.String,System.String,System.String,System.DateTime,SharedKernel.Domain.Entities.State)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="registryId"></param>
            <param name="table"></param>
            <param name="property"></param>
            <param name="originalValue"></param>
            <param name="currentValue"></param>
            <param name="date"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="P:SharedKernel.Domain.Entities.AuditChange.RegistryId">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.AuditChange.Table">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.AuditChange.Property">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.AuditChange.OriginalValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.AuditChange.CurrentValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.AuditChange.Date">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.AuditChange.State">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedKernel.Domain.Entities.DirectoryEntity">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Entities.DirectoryEntity.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Entities.DirectoryEntity.Create(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="P:SharedKernel.Domain.Entities.DirectoryEntity.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedKernel.Domain.Entities.Entity`1">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Entities.Entity`1.#ctor">
            <summary>
            Entity constructor for ORMs
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Entities.Entity`1.#ctor(`0)">
            <summary>
            Entity constructor
            </summary>
            <param name="id">The identifier</param>
        </member>
        <member name="P:SharedKernel.Domain.Entities.Entity`1.Id">
            <summary>
            The object identifier
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Entities.Entity`1.IsTransient">
            <summary>
            Check if this entity is transient, ie, without identity at this moment
            </summary>
            <returns>True if entity is transient, else false</returns>
        </member>
        <member name="M:SharedKernel.Domain.Entities.Entity`1.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals"/>
            </summary>
            <param name="obj"><see cref="M:System.Object.Equals"/></param>
            <returns><see cref="M:System.Object.Equals"/></returns>
        </member>
        <member name="M:SharedKernel.Domain.Entities.Entity`1.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
            <returns><see cref="M:System.Object.GetHashCode"/></returns>
        </member>
        <member name="M:SharedKernel.Domain.Entities.Entity`1.op_Equality(SharedKernel.Domain.Entities.Entity{`0},SharedKernel.Domain.Entities.Entity{`0})">
            <summary>
            Compare by identifier
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Entities.Entity`1.op_Inequality(SharedKernel.Domain.Entities.Entity{`0},SharedKernel.Domain.Entities.Entity{`0})">
            <summary>
            Compare by identifier
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Domain.Entities.EntityAuditable`1">
            <summary>
            An entity with creation and modification audit
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Entities.EntityAuditable`1.#ctor">
            <summary>
            Entity constructor for ORMs
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Entities.EntityAuditable`1.#ctor(`0,System.DateTime,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="id">Identifier</param>
            <param name="createdAt">Creation Date</param>
            <param name="createdBy">Creation user identifier</param>
        </member>
        <member name="P:SharedKernel.Domain.Entities.EntityAuditable`1.CreatedBy">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.EntityAuditable`1.CreatedAt">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.EntityAuditable`1.LastModifiedBy">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.EntityAuditable`1.LastModifiedAt">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Entities.EntityAuditable`1.Create(System.DateTime,System.Guid)">
            <summary>
            
            </summary>
            <param name="createdAt"></param>
            <param name="createdBy"></param>
        </member>
        <member name="M:SharedKernel.Domain.Entities.EntityAuditable`1.Change(System.DateTime,System.Guid)">
            <summary>
            
            </summary>
            <param name="lastModifiedAt"></param>
            <param name="lastModifiedBy"></param>
        </member>
        <member name="T:SharedKernel.Domain.Entities.EntityAuditableLogicalRemove`1">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:SharedKernel.Domain.Entities.EntityAuditableLogicalRemove`1.DeletedBy">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.EntityAuditableLogicalRemove`1.DeletedAt">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Entities.EntityAuditableLogicalRemove`1.Delete(System.DateTime,System.Guid)">
            <summary>
            
            </summary>
            <param name="deletedAt"></param>
            <param name="deletedBy"></param>
        </member>
        <member name="M:SharedKernel.Domain.Entities.EntityAuditableLogicalRemove`1.Restore">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedKernel.Domain.Entities.FileEntity">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Entities.FileEntity.Create(System.String,System.Byte[])">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Entities.FileEntity.Create(System.String,System.String,System.String,System.String,System.Byte[])">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="extension"></param>
            <param name="contentType"></param>
            <param name="contents"></param>
            <returns></returns>
        </member>
        <member name="P:SharedKernel.Domain.Entities.FileEntity.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.FileEntity.Extension">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.FileEntity.ContentType">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.FileEntity.Contents">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.FileEntity.ParentDirectory">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedKernel.Domain.Entities.Globalization.EntityIsTranslatable`5">
            <summary>
            
            </summary>
            <typeparam name="TEntityKey"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TTranslation"></typeparam>
            <typeparam name="TLanguage"></typeparam>
            <typeparam name="TLanguageKey"></typeparam>
        </member>
        <member name="P:SharedKernel.Domain.Entities.Globalization.EntityIsTranslatable`5.Translations">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Entities.Globalization.EntityIsTranslatable`5.AddTranslation(`2)">
            <summary>
            
            </summary>
            <param name="translation"></param>
        </member>
        <member name="T:SharedKernel.Domain.Entities.Globalization.EntityIsTranslatable`4">
            <summary>
            
            </summary>
            <typeparam name="TEntityKey"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TTranslation"></typeparam>
            <typeparam name="TLanguage"></typeparam>
        </member>
        <member name="T:SharedKernel.Domain.Entities.Globalization.EntityIsTranslatable`3">
            <summary>
            
            </summary>
            <typeparam name="TEntityKey"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TTranslation"></typeparam>
        </member>
        <member name="T:SharedKernel.Domain.Entities.Globalization.EntityTranslated`4">
            <summary>
            
            </summary>
            <typeparam name="TEntityKey"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TLanguage"></typeparam>
            <typeparam name="TLanguageKey"></typeparam>
        </member>
        <member name="P:SharedKernel.Domain.Entities.Globalization.EntityTranslated`4.Translated">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.Globalization.EntityTranslated`4.EntityId">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.Globalization.EntityTranslated`4.Entity">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.Globalization.EntityTranslated`4.LanguageId">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.Globalization.EntityTranslated`4.Language">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedKernel.Domain.Entities.Globalization.EntityTranslated`3">
            <summary>
            
            </summary>
            <typeparam name="TEntityKey"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TLanguage"></typeparam>
        </member>
        <member name="T:SharedKernel.Domain.Entities.Globalization.EntityTranslated`2">
            <summary>
            
            </summary>
            <typeparam name="TEntityKey"></typeparam>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:SharedKernel.Domain.Entities.Globalization.IEntityIsTranslatable`1">
            <summary>
            
            </summary>
            <typeparam name="TTranslation"></typeparam>
        </member>
        <member name="P:SharedKernel.Domain.Entities.Globalization.IEntityIsTranslatable`1.Translations">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedKernel.Domain.Entities.Globalization.IEntityIsTranslatable`5">
            <summary>
            
            </summary>
            <typeparam name="TEntityKey"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TTranslation"></typeparam>
            <typeparam name="TLanguage"></typeparam>
            <typeparam name="TLanguageKey"></typeparam>
        </member>
        <member name="T:SharedKernel.Domain.Entities.Globalization.IEntityIsTranslatable`4">
            <summary>
            
            </summary>
            <typeparam name="TEntityKey"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TTranslation"></typeparam>
            <typeparam name="TLanguage"></typeparam>
        </member>
        <member name="T:SharedKernel.Domain.Entities.Globalization.IEntityIsTranslatable`3">
            <summary>
            
            </summary>
            <typeparam name="TEntityKey"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TTranslation"></typeparam>
        </member>
        <member name="T:SharedKernel.Domain.Entities.Globalization.IEntityTranslated`4">
            <summary>
            
            </summary>
            <typeparam name="TEntityKey"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TLanguage"></typeparam>
            <typeparam name="TLanguageKey"></typeparam>
        </member>
        <member name="P:SharedKernel.Domain.Entities.Globalization.IEntityTranslated`4.Translated">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.Globalization.IEntityTranslated`4.EntityId">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.Globalization.IEntityTranslated`4.Entity">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.Globalization.IEntityTranslated`4.LanguageId">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.Globalization.IEntityTranslated`4.Language">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedKernel.Domain.Entities.Globalization.IEntityTranslated`3">
            <summary>
            
            </summary>
            <typeparam name="TEntityKey"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TLanguage"></typeparam>
        </member>
        <member name="T:SharedKernel.Domain.Entities.Globalization.IEntityTranslated`2">
            <summary>
            
            </summary>
            <typeparam name="TEntityKey"></typeparam>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:SharedKernel.Domain.Entities.Globalization.Language">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Entities.Globalization.Language.Create(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:SharedKernel.Domain.Entities.Globalization.Language.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedKernel.Domain.Entities.Globalization.LanguageTranslated">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Entities.Globalization.LanguageTranslated.Create(System.String,System.String,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="entityId"></param>
            <param name="languageId"></param>
            <param name="translated"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:SharedKernel.Domain.Entities.Globalization.LanguageTranslated.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedKernel.Domain.Entities.IEntity">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedKernel.Domain.Entities.IEntity`1">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:SharedKernel.Domain.Entities.IEntity`1.Id">
            <summary>
            The identifier of de entity
            </summary>
        </member>
        <member name="T:SharedKernel.Domain.Entities.IEntityAuditable">
            <summary>
            https://stackoverflow.com/questions/26355486/entity-framework-6-audit-track-changes
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.IEntityAuditable.CreatedBy">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.IEntityAuditable.CreatedAt">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.IEntityAuditable.LastModifiedBy">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.IEntityAuditable.LastModifiedAt">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Entities.IEntityAuditable.Create(System.DateTime,System.Guid)">
            <summary>
            
            </summary>
            <param name="createdAt"></param>
            <param name="createdBy"></param>
        </member>
        <member name="M:SharedKernel.Domain.Entities.IEntityAuditable.Change(System.DateTime,System.Guid)">
            <summary>
            
            </summary>
            <param name="lastModifiedAt"></param>
            <param name="lastModifiedBy"></param>
        </member>
        <member name="T:SharedKernel.Domain.Entities.IEntityAuditableLogicalRemove">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.IEntityAuditableLogicalRemove.DeletedBy">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.IEntityAuditableLogicalRemove.DeletedAt">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Entities.IEntityAuditableLogicalRemove.Delete(System.DateTime,System.Guid)">
            <summary>
            
            </summary>
            <param name="deletedAt"></param>
            <param name="userId"></param>
        </member>
        <member name="M:SharedKernel.Domain.Entities.IEntityAuditableLogicalRemove.Restore">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedKernel.Domain.Entities.MimeMappingEntity">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Entities.MimeMappingEntity.GetMimeMapping(System.String)">
            <summary>Returns the MIME mapping for the specified file name.</summary>
            <param name="fileName">The file name that is used to determine the MIME type.</param>
        </member>
        <member name="T:SharedKernel.Domain.Entities.Paged.DomainPagedList`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Entities.Paged.DomainPagedList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="items"></param>
            <param name="total"></param>
            <param name="totalFiltered"></param>
        </member>
        <member name="P:SharedKernel.Domain.Entities.Paged.DomainPagedList`1.Items">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.Paged.DomainPagedList`1.Total">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.Paged.DomainPagedList`1.TotalFiltered">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedKernel.Domain.Entities.Paged.Property">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Entities.Paged.Property.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="value"></param>
        </member>
        <member name="P:SharedKernel.Domain.Entities.Paged.Property.Field">
            <summary>
            The data item field to which the filter operator is applied.
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Entities.Paged.Property.Value">
            <summary>
            The value to which the field is compared. Has to be of the same type as the field.
            </summary>
        </member>
        <member name="T:SharedKernel.Domain.Entities.State">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharedKernel.Domain.Entities.State.Detached">
            <summary>
            The entity is not being tracked by the context.
            An entity is in this state immediately after it has been created with the new operator
            or with one of the <see cref="T:System.Data.Entity.DbSet" /> Create methods.
            </summary>
        </member>
        <member name="F:SharedKernel.Domain.Entities.State.Unchanged">
            <summary>
            The entity is being tracked by the context and exists in the database, and its property
            values have not changed from the values in the database.
            </summary>
        </member>
        <member name="F:SharedKernel.Domain.Entities.State.Added">
            <summary>
            The entity is being tracked by the context but does not yet exist in the database.
            </summary>
        </member>
        <member name="F:SharedKernel.Domain.Entities.State.Deleted">
            <summary>
            The entity is being tracked by the context and exists in the database, but has been marked
            for deletion from the database the next time SaveChanges is called.
            </summary>
        </member>
        <member name="F:SharedKernel.Domain.Entities.State.Modified">
            <summary>
            The entity is being tracked by the context and exists in the database, and some or all of its
            property values have been modified.
            </summary>
        </member>
        <member name="T:SharedKernel.Domain.Events.DomainEvent">
            <summary>
            Generic domain event
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Events.DomainEvent.#ctor">
            <summary>
            Domain Event serializable constructor
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Events.DomainEvent.#ctor(System.String,System.String,System.String)">
            <summary>
            Domain event constructor
            </summary>
            <param name="aggregateId"></param>
            <param name="eventId"></param>
            <param name="occurredOn"></param>
        </member>
        <member name="P:SharedKernel.Domain.Events.DomainEvent.AggregateId">
            <summary>
            The aggregate root identifier
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Events.DomainEvent.EventId">
            <summary>
            The event identifier
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Events.DomainEvent.OccurredOn">
            <summary>
            When the event occurred
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Events.DomainEvent.GetEventName">
            <summary>
            The event identifier for message queues
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Events.DomainEvent.FromPrimitives(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Create a new Domain event with default values
            </summary>
            <param name="aggregateId"></param>
            <param name="body"></param>
            <param name="eventId"></param>
            <param name="occurredOn"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Events.DomainEvent.ParseExact(System.String)">
            <summary>
            Parse body date to DateTime
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Domain.Events.DomainEventPrimitive">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Events.DomainEventPrimitive.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Events.DomainEventPrimitive.AggregateId">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Events.DomainEventPrimitive.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Events.DomainEventPrimitive.OccurredOn">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Events.DomainEventPrimitive.Body">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedKernel.Domain.Events.IEventBus">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Events.IEventBus.Publish(SharedKernel.Domain.Events.DomainEvent,System.Threading.CancellationToken)">
            <summary>
            Publish an event to event bus
            </summary>
            <param name="event"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Events.IEventBus.Publish(System.Collections.Generic.List{SharedKernel.Domain.Events.DomainEvent},System.Threading.CancellationToken)">
            <summary>
            Publish a list of events to event bus
            </summary>
            <param name="events"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Domain.Events.IRequest">
            <summary>
            Request made to a bus
            </summary>
        </member>
        <member name="T:SharedKernel.Domain.Exceptions.ExceptionCodes">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Exceptions.ExceptionCodes.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Exceptions.ExceptionCodes.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:SharedKernel.Domain.Exceptions.ResourceException">
            <summary>
            Resource exception
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Exceptions.ResourceException.Code">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Exceptions.ResourceException.#ctor(System.String,System.String,System.Reflection.Assembly)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="resourcePath"></param>
            <param name="assembly"></param>
        </member>
        <member name="M:SharedKernel.Domain.Exceptions.ResourceException.#ctor(System.String,System.String,System.Reflection.Assembly,System.Exception)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="resourcePath"></param>
            <param name="assembly"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:SharedKernel.Domain.Exceptions.SharedKernelDomainException">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Exceptions.SharedKernelDomainException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:SharedKernel.Domain.Exceptions.SharedKernelDomainException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:SharedKernel.Domain.Repositories.ICreateRepository`1">
            <summary>
            
            </summary>
            <typeparam name="TAggregate"></typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.ICreateRepository`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="aggregate"></param>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.ICreateRepository`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="aggregates"></param>
        </member>
        <member name="T:SharedKernel.Domain.Repositories.ICreateRepositoryAsync`1">
            <summary>
            
            </summary>
            <typeparam name="TAggregate"></typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.ICreateRepositoryAsync`1.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="aggregate"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.ICreateRepositoryAsync`1.AddRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="aggregates"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Domain.Repositories.IDeleteRepository`1">
            <summary>
            
            </summary>
            <typeparam name="TAggregate"></typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IDeleteRepository`1.Remove(`0)">
            <summary>
            
            </summary>
            <param name="aggregate"></param>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IDeleteRepository`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="aggregate"></param>
        </member>
        <member name="T:SharedKernel.Domain.Repositories.IDeleteRepositoryAsync`1">
            <summary>
            
            </summary>
            <typeparam name="TAggregate"></typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IDeleteRepositoryAsync`1.RemoveAsync(`0,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="aggregate"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IDeleteRepositoryAsync`1.RemoveRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="aggregate"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Domain.Repositories.IDirectoryRepository">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IDirectoryRepository.GetFilesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IDirectoryRepository.GetFileNamesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IDirectoryRepository.GetFilesEntitiesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            ATTENTION, READ THE CONTENTS OF ALL FILES AND LOAD THEM IN MEMORY
            </summary>
            <param name="path"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IDirectoryRepository.ExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IDirectoryRepository.AddAsync(SharedKernel.Domain.Entities.DirectoryEntity,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="directory"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Domain.Repositories.IDirectoryRepositoryAsync">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IDirectoryRepositoryAsync.GetFilesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IDirectoryRepositoryAsync.GetFileNamesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IDirectoryRepositoryAsync.GetFilesEntitiesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            ATTENTION, READ THE CONTENTS OF ALL FILES AND LOAD THEM IN MEMORY
            </summary>
            <param name="path"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IDirectoryRepositoryAsync.ExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IDirectoryRepositoryAsync.AddAsync(SharedKernel.Domain.Entities.DirectoryEntity,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="directory"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Domain.Repositories.IFileRepository">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IFileRepository.AddAsync(SharedKernel.Domain.Entities.FileEntity,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="file"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IFileRepository.ReadAllLinesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IFileRepository.ReadAllBytesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IFileRepository.ExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IFileRepository.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IFileRepository.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IFileRepository.CopyAsync(SharedKernel.Domain.Entities.FileEntity,SharedKernel.Domain.Entities.FileEntity,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="sourceFileName"></param>
            <param name="destFileName"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IFileRepository.MoveAsync(SharedKernel.Domain.Entities.FileEntity,SharedKernel.Domain.Entities.FileEntity,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="sourceFileName"></param>
            <param name="destFileName"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Domain.Repositories.IFileRepositoryAsync">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IFileRepositoryAsync.AddAsync(SharedKernel.Domain.Entities.FileEntity,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="file"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IFileRepositoryAsync.ReadAllLinesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IFileRepositoryAsync.ReadAllBytesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IFileRepositoryAsync.ExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IFileRepositoryAsync.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IFileRepositoryAsync.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IFileRepositoryAsync.CopyAsync(SharedKernel.Domain.Entities.FileEntity,SharedKernel.Domain.Entities.FileEntity,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="sourceFileName"></param>
            <param name="destFileName"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IFileRepositoryAsync.MoveAsync(SharedKernel.Domain.Entities.FileEntity,SharedKernel.Domain.Entities.FileEntity,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="sourceFileName"></param>
            <param name="destFileName"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Domain.Repositories.IPersistRepository">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IPersistRepository.Rollback">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IPersistRepository.SaveChanges">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Domain.Repositories.IPersistRepositoryAsync">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IPersistRepositoryAsync.RollbackAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IPersistRepositoryAsync.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Domain.Repositories.IReadRepository`1">
            <summary>
            
            </summary>
            <typeparam name="TAggregate"></typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IReadRepository`1.GetById``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IReadRepository`1.Any">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IReadRepository`1.Any``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Domain.Repositories.IReadRepositoryAsync`1">
            <summary>
            
            </summary>
            <typeparam name="TAggregate"></typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IReadRepositoryAsync`1.GetByIdAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="key"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IReadRepositoryAsync`1.GetDeleteByIdAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="key"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IReadRepositoryAsync`1.AnyAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IReadRepositoryAsync`1.CountAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IReadRepositoryAsync`1.AnyAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="key"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Domain.Repositories.IReadSpecificationRepository`1">
            <summary>
            
            </summary>
            <typeparam name="TAggregateRoot"></typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IReadSpecificationRepository`1.Where(SharedKernel.Domain.Specifications.Common.ISpecification{`0})">
            <summary>
            
            </summary>
            <param name="spec"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IReadSpecificationRepository`1.Single(SharedKernel.Domain.Specifications.Common.ISpecification{`0})">
            <summary>
            
            </summary>
            <param name="spec"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IReadSpecificationRepository`1.SingleOrDefault(SharedKernel.Domain.Specifications.Common.ISpecification{`0})">
            <summary>
            
            </summary>
            <param name="spec"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IReadSpecificationRepository`1.Any(SharedKernel.Domain.Specifications.Common.ISpecification{`0})">
            <summary>
            
            </summary>
            <param name="spec"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Domain.Repositories.IReadSpecificationRepositoryAsync`1">
            <summary>
            
            </summary>
            <typeparam name="TAggregateRoot"></typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IReadSpecificationRepositoryAsync`1.WhereAsync(SharedKernel.Domain.Specifications.Common.ISpecification{`0},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="spec"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IReadSpecificationRepositoryAsync`1.SingleAsync(SharedKernel.Domain.Specifications.Common.ISpecification{`0},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="spec"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IReadSpecificationRepositoryAsync`1.SingleOrDefaultAsync(SharedKernel.Domain.Specifications.Common.ISpecification{`0},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="spec"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IReadSpecificationRepositoryAsync`1.AnyAsync(SharedKernel.Domain.Specifications.Common.ISpecification{`0},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="spec"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Domain.Repositories.IRepository`1">
            <summary>
            
            </summary>
            <typeparam name="TAggregateRoot"></typeparam>
        </member>
        <member name="T:SharedKernel.Domain.Repositories.IRepositoryAsync`1">
            <summary>
            An asynchronous generic repository pattern with all crud actions
            </summary>
            <typeparam name="TAggregateRoot"></typeparam>
        </member>
        <member name="T:SharedKernel.Domain.Repositories.IUpdateRepository`1">
            <summary>
            
            </summary>
            <typeparam name="TAggregate"></typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IUpdateRepository`1.Update(`0)">
            <summary>
            
            </summary>
            <param name="aggregate"></param>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IUpdateRepository`1.UpdateRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="aggregates"></param>
        </member>
        <member name="T:SharedKernel.Domain.Repositories.IUpdateRepositoryAsync`1">
            <summary>
            
            </summary>
            <typeparam name="TAggregate"></typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IUpdateRepositoryAsync`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Repositories.IUpdateRepositoryAsync`1.UpdateRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="entities"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Domain.Security.IIdentityService">
            <summary>
            From: https://github.com/dotnet-architecture/eShopOnContainers/blob/dev/src/Services/Ordering/Ordering.API/Infrastructure/Services/IIdentityService.cs
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Security.IIdentityService.UserId">
            <summary>
            User logged identifier
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Security.IIdentityService.User">
            <summary>
            Users claims
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Security.IIdentityService.IsInRole(System.String)">
            <summary>
            User logged is in role
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Security.IIdentityService.IsAuthenticated">
            <summary>
            If user is logged in
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharedKernel.Domain.Security.IIdentityService.BasePath">
            <summary>
            Site base url
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Security.IIdentityService.UserAgent">
            <summary>
            Request user agent
             http://www.useragentstring.com/
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Security.IIdentityService.RemoteIpAddress">
            <summary>
            Request user ip address
            </summary>
        </member>
        <member name="T:SharedKernel.Domain.Specifications.Common.AndSpecification`1">
            <inheritdoc />
            <summary>
            A logic AND Specification
            </summary>
            <typeparam name="T">Type of entity that check this specification</typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.Common.AndSpecification`1.#ctor(SharedKernel.Domain.Specifications.Common.ISpecification{`0},SharedKernel.Domain.Specifications.Common.ISpecification{`0})">
            <summary>
            Default constructor for AndSpecification
            </summary>
            <param name="leftSide">Left side specification</param>
            <param name="rightSide">Right side specification</param>
        </member>
        <member name="P:SharedKernel.Domain.Specifications.Common.AndSpecification`1.LeftSideSpecification">
            <inheritdoc />
            <summary>
            Left side specification
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Specifications.Common.AndSpecification`1.RightSideSpecification">
            <inheritdoc />
            <summary>
            Right side specification
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.Common.AndSpecification`1.SatisfiedBy">
            <inheritdoc />
            <summary>
            <see cref="T:SharedKernel.Domain.Specifications.Common.ISpecification`1" />
            </summary>
            <returns><see cref="T:SharedKernel.Domain.Specifications.Common.ISpecification`1" /></returns>
        </member>
        <member name="T:SharedKernel.Domain.Specifications.Common.CompositeSpecification`1">
            <inheritdoc />
            <summary>
            Base class for composite specifications
            </summary>
            <typeparam name="TEntity">Type of entity that check this specification</typeparam>
        </member>
        <member name="P:SharedKernel.Domain.Specifications.Common.CompositeSpecification`1.LeftSideSpecification">
            <summary>
            Left side specification for this composite element
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Specifications.Common.CompositeSpecification`1.RightSideSpecification">
            <summary>
            Right side specification for this composite element
            </summary>
        </member>
        <member name="T:SharedKernel.Domain.Specifications.Common.DirectSpecification`1">
            <inheritdoc />
            <summary>
            A Direct Specification is a simple implementation
            of specification that acquire this from a lambda expression
            in  constructor
            </summary>
            <typeparam name="TEntity">Type of entity that check this specification</typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.Common.DirectSpecification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Default constructor for Direct Specification
            </summary>
            <param name="matchingCriteria">A Matching Criteria</param>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.Common.DirectSpecification`1.SatisfiedBy">
            <inheritdoc />
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Domain.Specifications.Common.IName">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Specifications.Common.IName.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedKernel.Domain.Specifications.Common.ExistsSpecification`3">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TTranslation"></typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.Common.ExistsSpecification`3.#ctor(`0,System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="name"></param>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.Common.ExistsSpecification`3.SatisfiedBy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Domain.Specifications.Common.ExpressionBuilder">
            <summary>
            Extension methods for adding AND and OR with parameters rebind
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.Common.ExpressionBuilder.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Compose two expressions and merge all in a new expression
            </summary>
            <typeparam name="T">Type of params in expression</typeparam>
            <param name="first">Expression instance</param>
            <param name="second">Expression to merge</param>
            <param name="merge">Function to merge</param>
            <returns>New merged expression</returns>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.Common.ExpressionBuilder.And``1(SharedKernel.Domain.Specifications.Common.ISpecification{``0},SharedKernel.Domain.Specifications.Common.ISpecification{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.Common.ExpressionBuilder.Or``1(SharedKernel.Domain.Specifications.Common.ISpecification{``0},SharedKernel.Domain.Specifications.Common.ISpecification{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.Common.ExpressionBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            And operator
            </summary>
            <typeparam name="T">Type of params in expression</typeparam>
            <param name="first">Right Expression in AND operation</param>
            <param name="second">Left Expression in And operation</param>
            <returns>New AND expression</returns>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.Common.ExpressionBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Or operator
            </summary>
            <typeparam name="T">Type of param in expression</typeparam>
            <param name="first">Right expression in OR operation</param>
            <param name="second">Left expression in OR operation</param>
            <returns>New Or expressions</returns>
        </member>
        <member name="T:SharedKernel.Domain.Specifications.Common.FalseSpecification`1">
            <inheritdoc />
            <summary>
            True specification
            </summary>
            <typeparam name="TEntity">Type of entity in this specification</typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.Common.FalseSpecification`1.SatisfiedBy">
            <inheritdoc />
            <summary>
            <see cref="!: Specification{TEntity}" />
            </summary>
            <returns><see cref="!: Specification{TEntity}" /></returns>
        </member>
        <member name="T:SharedKernel.Domain.Specifications.Common.ISpecification`1">
            <summary>
            Base contract for Specification pattern, for more information
            about this pattern see http://martinfowler.com/apsupp/spec.pdf
            or http://en.wikipedia.org/wiki/Specification_pattern.
            This is really a variant implementation where we have added Linq and
            lambda expression into this pattern.
            </summary>
            <typeparam name="TEntity">Type of entity</typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.Common.ISpecification`1.SatisfiedBy">
            <summary>
            Check if this specification is satisfied by a
            specific expression lambda
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Domain.Specifications.Common.NotSpecification`1">
            <inheritdoc />
            <summary>
            NotSpecification convert a original
            specification with NOT logic operator
            </summary>
            <typeparam name="TEntity">Type of element for this specification</typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.Common.NotSpecification`1.#ctor(SharedKernel.Domain.Specifications.Common.ISpecification{`0})">
            <summary>
            Constructor for NotSpecification
            </summary>
            <param name="originalSpecification">Original specification</param>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.Common.NotSpecification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Constructor for NotSpecification
            </summary>
            <param name="originalSpecification">Original specification</param>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.Common.NotSpecification`1.SatisfiedBy">
            <inheritdoc />
            <summary>
            <see cref="T:SharedKernel.Domain.Specifications.Common.ISpecification`1" />
            </summary>
            <returns><see cref="T:SharedKernel.Domain.Specifications.Common.ISpecification`1" /></returns>
        </member>
        <member name="T:SharedKernel.Domain.Specifications.Common.OrSpecification`1">
            <inheritdoc />
            <summary>
            A Logic OR Specification
            </summary>
            <typeparam name="T">Type of entity that check this specification</typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.Common.OrSpecification`1.#ctor(SharedKernel.Domain.Specifications.Common.ISpecification{`0},SharedKernel.Domain.Specifications.Common.ISpecification{`0})">
            <summary>
            Default constructor for AndSpecification
            </summary>
            <param name="leftSide">Left side specification</param>
            <param name="rightSide">Right side specification</param>
        </member>
        <member name="P:SharedKernel.Domain.Specifications.Common.OrSpecification`1.LeftSideSpecification">
            <inheritdoc />
            <summary>
            Left side specification
            </summary>
        </member>
        <member name="P:SharedKernel.Domain.Specifications.Common.OrSpecification`1.RightSideSpecification">
            <inheritdoc />
            <summary>
            Right side specification
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.Common.OrSpecification`1.SatisfiedBy">
            <inheritdoc />
            <summary>
            <see cref="T:SharedKernel.Domain.Specifications.Common.ISpecification`1" />
            </summary>
            <returns><see cref="T:SharedKernel.Domain.Specifications.Common.ISpecification`1" /></returns>
        </member>
        <member name="T:SharedKernel.Domain.Specifications.Common.ParameterRebind">
            <inheritdoc />
            <summary>
            Helper for rebind parameters without use Invoke method in expressions
            ( this methods is not supported in all linq query providers,
            for example in Linq2Entities is not supported)
            </summary>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.Common.ParameterRebind.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <inheritdoc />
            <summary>
            Default constructor
            </summary>
            <param name="map">Map specification</param>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.Common.ParameterRebind.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            Replace parameters in expression with a Map information
            </summary>
            <param name="map">Map information</param>
            <param name="exp">Expression to replace parameters</param>
            <returns>Expression with parameters replaced</returns>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.Common.ParameterRebind.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <inheritdoc />
            <summary>
            Visit pattern method
            </summary>
            <param name="p">A Parameter expression</param>
            <returns>New visited expression</returns>
        </member>
        <member name="T:SharedKernel.Domain.Specifications.Common.Specification`1">
            <inheritdoc />
            <summary>
            Represent a Expression Specification
            <remarks>
            Specification overload operators for create AND,OR or NOT specifications.
            Additionally overload AND and OR operators with the same sense of ( binary And and binary Or ).
            C# couldn't overload the AND and OR operators directly since the framework doesnt allow such craziness. But
            with overloading false and true operators this is possible. For explain this behavior please read
            http://msdn.microsoft.com/en-us/library/aa691312(VS.71).aspx
            </remarks>
            </summary>
            <typeparam name="TEntity">Type of item in the criteria</typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.Common.Specification`1.SatisfiedBy">
            <inheritdoc />
            <summary>
            IsSatisfied Specification pattern method,
            </summary>
            <returns>Expression that satisfy this specification</returns>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.Common.Specification`1.op_BitwiseAnd(SharedKernel.Domain.Specifications.Common.Specification{`0},SharedKernel.Domain.Specifications.Common.Specification{`0})">
            <summary>
             And operator
            </summary>
            <param name="leftSideSpecification">left operand in this AND operation</param>
            <param name="rightSideSpecification">right operand in this AND operation</param>
            <returns>New specification</returns>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.Common.Specification`1.op_BitwiseOr(SharedKernel.Domain.Specifications.Common.Specification{`0},SharedKernel.Domain.Specifications.Common.Specification{`0})">
            <summary>
            Or operator
            </summary>
            <param name="leftSideSpecification">left operand in this OR operation</param>
            <param name="rightSideSpecification">left operand in this OR operation</param>
            <returns>New specification </returns>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.Common.Specification`1.op_LogicalNot(SharedKernel.Domain.Specifications.Common.Specification{`0})">
            <summary>
            Not specification
            </summary>
            <param name="specification">Specification to negate</param>
            <returns>New specification</returns>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.Common.Specification`1.op_False(SharedKernel.Domain.Specifications.Common.Specification{`0})">
            <summary>
            Override operator false, only for support AND OR operators
            </summary>
            <param name="specification">Specification instance</param>
            <returns>See False operator in C#</returns>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.Common.Specification`1.op_True(SharedKernel.Domain.Specifications.Common.Specification{`0})">
            <summary>
            Override operator True, only for support AND OR operators
            </summary>
            <param name="specification">Specification instance</param>
            <returns>See True operator in C#</returns>
        </member>
        <member name="T:SharedKernel.Domain.Specifications.Common.TrueSpecification`1">
            <inheritdoc />
            <summary>
            True specification
            </summary>
            <typeparam name="TEntity">Type of entity in this specification</typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.Common.TrueSpecification`1.SatisfiedBy">
            <inheritdoc />
            <summary>
            <see cref="!: Specification{TEntity}" />
            </summary>
            <returns><see cref="!: Specification{TEntity}" /></returns>
        </member>
        <member name="T:SharedKernel.Domain.Specifications.DeletedSpecification`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.DeletedSpecification`1.SatisfiedBy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Domain.Specifications.EntityByIdSpecification`2">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.EntityByIdSpecification`2.#ctor(`1)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.EntityByIdSpecification`2.SatisfiedBy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Domain.Specifications.NotDeletedByIdSpecification`2">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.NotDeletedByIdSpecification`2.#ctor(`1)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.NotDeletedByIdSpecification`2.SatisfiedBy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Domain.Specifications.NotDeletedSpecification`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.NotDeletedSpecification`1.SatisfiedBy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Domain.Specifications.ObjectContainsOrEqualSpecification`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.ObjectContainsOrEqualSpecification`1.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.ObjectContainsOrEqualSpecification`1.SatisfiedBy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Domain.Specifications.PropertiesContainsOrEqualSpecification`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.PropertiesContainsOrEqualSpecification`1.#ctor(System.Collections.Generic.IEnumerable{SharedKernel.Domain.Entities.Paged.Property})">
            <summary>
            
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.PropertiesContainsOrEqualSpecification`1.SatisfiedBy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Domain.Specifications.PropertyContainsOrEqualSpecification`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.PropertyContainsOrEqualSpecification`1.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            
            </summary>
            <param name="propertyInfo"></param>
            <param name="value"></param>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.PropertyContainsOrEqualSpecification`1.SatisfiedBy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Domain.Specifications.TranslatedSpecification`4">
            <summary>
            
            </summary>
            <typeparam name="TEntityKey"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TTranslation"></typeparam>
            <typeparam name="TLanguage"></typeparam>
        </member>
        <member name="M:SharedKernel.Domain.Specifications.TranslatedSpecification`4.SatisfiedBy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Domain.Specifications.TranslatedSpecification`3">
            <summary>
            
            </summary>
            <typeparam name="TEntityKey"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TTranslation"></typeparam>
        </member>
        <member name="T:SharedKernel.Domain.ValueObjects.ValueObject`1">
            <inheritdoc />
            <summary>
            Base class for value objects in domain.
            Value
            </summary>
            <typeparam name="TValueObject">The type of this value object</typeparam>
        </member>
        <member name="M:SharedKernel.Domain.ValueObjects.ValueObject`1.Equals(`0)">
            <inheritdoc />
            <summary>
            <see cref="M:System.Object.IEquatable{TValueObject}" />
            </summary>
            <param name="other"><see cref="M:System.Object.IEquatable{TValueObject}" /></param>
            <returns><see cref="M:System.Object.IEquatable{TValueObject}" /></returns>
        </member>
        <member name="M:SharedKernel.Domain.ValueObjects.ValueObject`1.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals"/>
            </summary>
            <param name="obj"><see cref="M:System.Object.Equals"/></param>
            <returns><see cref="M:System.Object.Equals"/></returns>
        </member>
        <member name="M:SharedKernel.Domain.ValueObjects.ValueObject`1.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
            <returns><see cref="M:System.Object.GetHashCode"/></returns>
        </member>
        <member name="M:SharedKernel.Domain.ValueObjects.ValueObject`1.op_Equality(SharedKernel.Domain.ValueObjects.ValueObject{`0},SharedKernel.Domain.ValueObjects.ValueObject{`0})">
            <summary>
            Return true if the value objects are the same
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Domain.ValueObjects.ValueObject`1.op_Inequality(SharedKernel.Domain.ValueObjects.ValueObject{`0},SharedKernel.Domain.ValueObjects.ValueObject{`0})">
            <summary>
            Return true if the value objects are distinct
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
    </members>
</doc>
