<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharedKernel.Infrastructure</name>
    </assembly>
    <members>
        <member name="T:SharedKernel.Infrastructure.ActiveDirectory.ActiveDirectoryServiceExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.ActiveDirectory.ActiveDirectoryServiceExtensions.AddActiveDirectory(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.ActiveDirectory.ActiveDirectorySettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.ActiveDirectory.ActiveDirectorySettings.Path">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.ActiveDirectory.ActiveDirectorySettings.CommonNamesKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.ActiveDirectory.ActiveDirectorySettings.OrganizationalUnitsKey">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedKernel.Infrastructure.Adapter.AutoMapper.AutoMapperTypeAdapter">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Adapter.AutoMapper.AutoMapperTypeAdapter.#ctor(AutoMapper.IConfigurationProvider)">
            <summary>
            
            </summary>
            <param name="configurationProvider"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Adapter.AutoMapper.AutoMapperTypeAdapter.MapTo``1(System.Object)">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Adapter.AutoMapper.AutoMapperTypeAdapter.MapTo``2(``0)">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Adapter.AutoMapper.AutoMapperTypeAdapter.MapTo``2(``0,``1)">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <param name="destination"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Adapter.AutoMapper.AutoMapperTypeAdapter.ProjectTo``1(System.Linq.IQueryable)">
            <summary>
            
            </summary>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Adapter.AutoMapper.AutoMapperTypeAdapterFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Adapter.AutoMapper.AutoMapperTypeAdapterFactory.#ctor(AutoMapper.IConfigurationProvider)">
            <summary>
            
            </summary>
            <param name="configurationProvider"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Adapter.AutoMapper.AutoMapperTypeAdapterFactory.Create">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Adapter.AutoMapper.AutoMapperTypeAdapterServiceExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Adapter.AutoMapper.AutoMapperTypeAdapterServiceExtensions.AddAutoMapperSharedKernel(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])">
            <summary>
            
            </summary>
            <param name="services"></param>
            <param name="assemblies"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Adapter.AutoMapper.AutoMapperTypeAdapterServiceExtensions.UseAutoMapperSharedKernel(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.AddSharedKernelExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.AddSharedKernelExtensions.AddSharedKernel(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Caching.DistributedCacheServiceExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Caching.DistributedCacheServiceExtensions.AddRedisDistributedCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Caching.InMemoryCacheServiceExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Caching.InMemoryCacheServiceExtensions.AddInMemoryCache(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Communication.Email.EmailException">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Communication.Email.EmailException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="code"></param>
        </member>
        <member name="T:SharedKernel.Infrastructure.Communication.Email.Smtp.SmtpEmailSender">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Communication.Email.Smtp.SmtpEmailSender.#ctor(SharedKernel.Application.Settings.IOptionsService{SharedKernel.Infrastructure.Communication.Email.Smtp.SmtpSettings})">
            <summary>
            
            </summary>
            <param name="emailSettings"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Communication.Email.Smtp.SmtpEmailSender.SendEmailAsync(System.String,System.String,SharedKernel.Application.Communication.Email.EmailAttachment)">
            <summary>
            
            </summary>
            <param name="subject"></param>
            <param name="message"></param>
            <param name="attachment"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Communication.Email.Smtp.SmtpEmailSender.SendEmailAsync(System.String,System.String,System.String,SharedKernel.Application.Communication.Email.EmailAttachment)">
            <summary>
            
            </summary>
            <param name="email"></param>
            <param name="subject"></param>
            <param name="message"></param>
            <param name="attachment"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Communication.Email.Smtp.SmtpEmailServiceExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Communication.Email.Smtp.SmtpEmailServiceExtensions.AddSmtp(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Communication.Email.Smtp.SmtpSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.Communication.Email.Smtp.SmtpSettings.MailServer">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.Communication.Email.Smtp.SmtpSettings.RequireSsl">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.Communication.Email.Smtp.SmtpSettings.RequireTls">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.Communication.Email.Smtp.SmtpSettings.MailPort">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.Communication.Email.Smtp.SmtpSettings.SenderName">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.Communication.Email.Smtp.SmtpSettings.Sender">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.Communication.Email.Smtp.SmtpSettings.Password">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedKernel.Infrastructure.Cqrs.Commands.BackgroundTaskQueue">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Commands.BackgroundTaskQueue.Any">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Commands.BackgroundTaskQueue.QueueBackground(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            
            </summary>
            <param name="workItem"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Commands.BackgroundTaskQueue.DequeueAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Cqrs.Commands.CommandServiceExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Commands.CommandServiceExtensions.AddCommandsHandlers(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <param name="applicationAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Commands.CommandServiceExtensions.AddCommandsHandlers(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <param name="commandHandlerType"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Commands.CommandServiceExtensions.AddInMemoryCommandBus(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Cqrs.Commands.IBackgroundTaskQueue">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Commands.IBackgroundTaskQueue.Any">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Commands.IBackgroundTaskQueue.QueueBackground(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            
            </summary>
            <param name="workItem"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Commands.IBackgroundTaskQueue.DequeueAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Cqrs.Commands.InMemory.InMemoryCommandBus">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Commands.InMemory.InMemoryCommandBus.#ctor(System.IServiceProvider,Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,SharedKernel.Infrastructure.Cqrs.Commands.IBackgroundTaskQueue,SharedKernel.Infrastructure.Cqrs.Middlewares.ExecuteMiddlewaresService,Microsoft.Extensions.Hosting.IHostApplicationLifetime)">
            <summary>
            
            </summary>
            <param name="serviceProvider"></param>
            <param name="serviceScopeFactory"></param>
            <param name="taskQueue"></param>
            <param name="executeMiddlewaresService"></param>
            <param name="applicationLifetime"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Commands.InMemory.InMemoryCommandBus.Dispatch``1(SharedKernel.Application.Cqrs.Commands.ICommandRequest{``0},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <typeparam name="TResponse"></typeparam>
            <param name="command"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Commands.InMemory.InMemoryCommandBus.Dispatch(SharedKernel.Application.Cqrs.Commands.ICommandRequest,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Commands.InMemory.InMemoryCommandBus.DispatchInBackground(SharedKernel.Application.Cqrs.Commands.ICommandRequest,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Commands.InMemory.InMemoryCommandBus.QueueInBackground(SharedKernel.Application.Cqrs.Commands.ICommandRequest)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Cqrs.Commands.QueuedHostedService">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Commands.QueuedHostedService.#ctor(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
            
            </summary>
            <param name="serviceScopeFactory"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Commands.QueuedHostedService.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="stoppingToken"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Commands.QueuedHostedService.StopAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="stoppingToken"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Cqrs.Middlewares.ExecuteMiddlewaresService">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Middlewares.ExecuteMiddlewaresService.#ctor(System.IServiceProvider)">
            <summary>
            
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Middlewares.ExecuteMiddlewaresService.ExecuteAsync``1(``0,System.Threading.CancellationToken,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <param name="last"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Middlewares.ExecuteMiddlewaresService.ExecuteAsync``2(``0,System.Threading.CancellationToken,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}})">
            <summary>
            
            </summary>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <param name="last"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Cqrs.Middlewares.TimerMiddleware`1">
            <summary>
            
            </summary>
            <typeparam name="TRequest"></typeparam>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Middlewares.TimerMiddleware`1.#ctor(SharedKernel.Application.Logging.ICustomLogger{`0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Middlewares.TimerMiddleware`1.Handle(`0,System.Threading.CancellationToken,System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Cqrs.Middlewares.TimerMiddleware`2">
            <summary>
            
            </summary>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Middlewares.TimerMiddleware`2.#ctor(SharedKernel.Application.Logging.ICustomLogger{`0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Middlewares.TimerMiddleware`2.Handle(`0,System.Threading.CancellationToken,System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{`1}})">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Cqrs.Middlewares.ValidationMiddleware`1">
            <summary>
            
            </summary>
            <typeparam name="TRequest"></typeparam>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Middlewares.ValidationMiddleware`1.#ctor(System.IServiceProvider)">
             <summary>
            
             </summary>
             <param name="serviceProvider"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Middlewares.ValidationMiddleware`1.Handle(`0,System.Threading.CancellationToken,System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Cqrs.Middlewares.ValidationMiddleware`2">
            <summary>
            
            </summary>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Middlewares.ValidationMiddleware`2.#ctor(System.IServiceProvider)">
             <summary>
            
             </summary>
             <param name="serviceProvider"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Middlewares.ValidationMiddleware`2.Handle(`0,System.Threading.CancellationToken,System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{`1}})">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Cqrs.Queries.InMemory.InMemoryQueryBus">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Queries.InMemory.InMemoryQueryBus.#ctor(SharedKernel.Infrastructure.Cqrs.Middlewares.ExecuteMiddlewaresService,System.IServiceProvider)">
            <summary>
            
            </summary>
            <param name="executeMiddlewaresService"></param>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Queries.InMemory.InMemoryQueryBus.Ask``1(SharedKernel.Application.Cqrs.Queries.IQueryRequest{``0},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <typeparam name="TResponse"></typeparam>
            <param name="query"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Cqrs.Queries.IQueryRequestHandler`2">
            <summary>
            
            </summary>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Queries.IQueryRequestHandler`2.Handle(`0,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="query"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Cqrs.Queries.QueryServiceExtension">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Queries.QueryServiceExtension.AddQueriesHandlers(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])">
            <summary>
            
            </summary>
            <param name="services"></param>
            <param name="infrastructureAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Queries.QueryServiceExtension.AddQueriesHandlers(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type[])">
            <summary>
            
            </summary>
            <param name="services"></param>
            <param name="queryHandlerTypes"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Queries.QueryServiceExtension.AddInMemoryQueryBus(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Cqrs.Queries.QueryServiceExtension.AddQueryBus(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.Dapper.ConnectionFactory.IDbConnectionFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Dapper.ConnectionFactory.IDbConnectionFactory.GetConnection">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.Dapper.DapperServiceExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Dapper.DapperServiceExtensions.AddDapperSqlServer(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.String,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
            <param name="connectionStringName"></param>
            <param name="serviceLifetime"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Dapper.DapperServiceExtensions.AddDapperPostgreSql(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.String,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
            <param name="connectionStringName"></param>
            <param name="serviceLifetime"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.Dapper.Queries.DapperQueryProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Dapper.Queries.DapperQueryProvider.#ctor(SharedKernel.Infrastructure.Data.Dapper.ConnectionFactory.IDbConnectionFactory)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Dapper.Queries.DapperQueryProvider.ExecuteQueryFirstOrDefaultAsync``1(System.String,System.Object)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Dapper.Queries.DapperQueryProvider.ExecuteQueryAsync``1(System.String,System.Object)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Dapper.Queries.DapperQueryProvider.ToPagedListAsync``1(System.String,System.Object,SharedKernel.Application.Cqrs.Queries.Entities.PageOptions)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="parameters"></param>
            <param name="pageOptions"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Dapper.Queries.DapperQueryProvider.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Dapper.Queries.DapperQueryProvider.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.Dapper.SqlAutoRefresh`1">
            <summary>
            
            </summary>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Dapper.SqlAutoRefresh`1.#ctor(System.String,System.String,System.Threading.CancellationToken,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            
            </summary>
            <param name="sqlQuery"></param>
            <param name="connectionString"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Dapper.SqlAutoRefresh`1.#ctor(System.String,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            
            </summary>
            <param name="sqlQuery"></param>
            <param name="connectionString"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Dapper.SqlAutoRefresh`1.GetLatest">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Dapper.SqlAutoRefresh`1.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.Dapper.SqlAutoRefresh`1.SqlConnectionWithDependency">
            <summary>
            The sole purpose is to intercept the <see cref="M:System.Data.Common.DbConnection.CreateDbCommand"/> call
            and associate it with the <see cref="T:Microsoft.Data.SqlClient.SqlDependency"/> before Dapper executes the command
            </summary>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.Elasticsearch.Client.ElasticsearchClient">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.Data.Elasticsearch.Client.ElasticsearchClient.Client">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Elasticsearch.Client.ElasticsearchClient.#ctor(Nest.ElasticClient,System.String)">
            <summary>
            
            </summary>
            <param name="client"></param>
            <param name="indexPrefix"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Elasticsearch.Client.ElasticsearchClient.Persist(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="id"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Elasticsearch.Client.ElasticsearchClient.IndexFor(System.String)">
            <summary>
            
            </summary>
            <param name="moduleName"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.Elasticsearch.Repositories.ElasticsearchRepository`1">
            <summary>
            
            </summary>
            <typeparam name="TAggregateRoot"></typeparam>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Elasticsearch.Repositories.ElasticsearchRepository`1.#ctor(SharedKernel.Infrastructure.Data.Elasticsearch.Client.ElasticsearchClient)">
            <summary>
            
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Elasticsearch.Repositories.ElasticsearchRepository`1.ModuleName">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Elasticsearch.Repositories.ElasticsearchRepository`1.SearchAllInElastic">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Elasticsearch.Repositories.ElasticsearchRepository`1.Persist(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Elasticsearch.Repositories.ElasticsearchRepository`1.Rollback">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Elasticsearch.Repositories.ElasticsearchRepository`1.SaveChanges">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.Elasticsearch.Repositories.ElasticsearchRepositoryAsync`1">
            <summary>
            
            </summary>
            <typeparam name="TAggregateRoot"></typeparam>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Elasticsearch.Repositories.ElasticsearchRepositoryAsync`1.#ctor(SharedKernel.Infrastructure.Data.Elasticsearch.Client.ElasticsearchClient)">
            <summary>
            
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Elasticsearch.Repositories.ElasticsearchRepositoryAsync`1.RollbackAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Elasticsearch.Repositories.ElasticsearchRepositoryAsync`1.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Configurations.AggregateRootIsTranslatableConfigurationBase`5">
            <summary>
            
            </summary>
            <typeparam name="TEntityKey"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TTranslation"></typeparam>
            <typeparam name="TLanguage"></typeparam>
            <typeparam name="TLanguageKey"></typeparam>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Configurations.AggregateRootIsTranslatableConfigurationBase`5.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`1})">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Configurations.AggregateRootIsTranslatableConfigurationBase`3">
            <summary>
            
            </summary>
            <typeparam name="TEntityKey"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TTranslation"></typeparam>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Configurations.EntityIsTranslatableConfigurationBase`5">
            <summary>
            
            </summary>
            <typeparam name="TEntityKey"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TTranslation"></typeparam>
            <typeparam name="TLanguage"></typeparam>
            <typeparam name="TLanguageKey"></typeparam>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Configurations.EntityIsTranslatableConfigurationBase`5.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`1})">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Configurations.EntityIsTranslatableConfigurationBase`3">
            <summary>
            
            </summary>
            <typeparam name="TEntityKey"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TTranslation"></typeparam>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Configurations.EntityTranslatedConfiguration`5">
            <summary>
            
            </summary>
            <typeparam name="TEntityTranslated"></typeparam>
            <typeparam name="TEntityKey"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TLanguage"></typeparam>
            <typeparam name="TLanguageKey"></typeparam>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Configurations.EntityTranslatedConfiguration`5.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Configurations.EntityTranslatedConfiguration`3">
            <summary>
            
            </summary>
            <typeparam name="TEntityTranslated"></typeparam>
            <typeparam name="TEntityKey"></typeparam>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Configurations.LanguageConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Configurations.LanguageConfiguration.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{SharedKernel.Domain.Entities.Globalization.Language})">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Configurations.LanguageTranslatedConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Configurations.LanguageTranslatedConfiguration.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{SharedKernel.Domain.Entities.Globalization.LanguageTranslated})">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Configurations.PropertyBuilderExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Configurations.PropertyBuilderExtensions.Currency``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0})">
            <summary>
            
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="propertyBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Configurations.PropertyBuilderExtensions.OnlyDate``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0})">
            <summary>
            
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="propertyBuilder"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.AuditableService">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.AuditableService.#ctor(SharedKernel.Domain.Security.IIdentityService,SharedKernel.Application.System.IDateTime,SharedKernel.Application.System.IGuid,SharedKernel.Application.Logging.ICustomLogger{SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.AuditableService})">
            <summary>
            
            </summary>
            <param name="identityService"></param>
            <param name="dateTime"></param>
            <param name="guid"></param>
            <param name="customLogger"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.AuditableService.Audit(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            
            </summary>
            <param name="dbContext"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.AuditableService.ModifyAuditableEntities(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            https://stackoverflow.com/questions/26355486/entity-framework-6-audit-track-changes
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.DbContextBase">
            <summary>
            Shared kernel DbContext
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.DbContextBase.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions,System.String,System.Reflection.Assembly,SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.IAuditableService)">
            <summary>
            Constructor
            </summary>
            <param name="options"></param>
            <param name="schema"></param>
            <param name="assemblyConfigurations"></param>
            <param name="auditableService"></param>
        </member>
        <member name="P:SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.DbContextBase.Schema">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.DbContextBase.GetConnection">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.DbContextBase.Rollback">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.DbContextBase.SaveChanges">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.DbContextBase.SaveChangesAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.DbContextBase.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.DbContextBase.RollbackAsync(System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>
            Rollback all changes
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.DbContextBase.SetAggregate``1">
            <summary>
            
            </summary>
            <typeparam name="TAggregateRoot"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.DbContextBase.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.DbContextBase.Validate">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.DbContextFactory`1">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.DbContextFactory`1.#ctor(System.IServiceProvider)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.DbContextFactory`1.CreateDbContext">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.IAuditableService">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.IAuditableService.Audit(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            
            </summary>
            <param name="dbContext"></param>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.IDbContextFactory`1">
            <summary>
                Defines a factory for creating <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances.
                A service of this type is registered in the dependency injection container by the
                <see cref="M:EntityFrameworkServiceCollectionExtensions.AddDbContextPool" /> methods.
            </summary>
            <typeparam name="TContext"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> type to create. </typeparam>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.IDbContextFactory`1.CreateDbContext">
            <summary>
                <para>
                    Creates a new <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance.
                </para>
                <para>
                    The caller is responsible for disposing the context; it will not be disposed by the dependency injection container.
                </para>
            </summary>
            <returns> A new context instance. </returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.IQueryableUnitOfWork">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.IQueryableUnitOfWork.SetAggregate``1">
            <summary>
            
            </summary>
            <typeparam name="TAggregateRoot"></typeparam>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.ServiceCollectionExtensions">
            <summary>
            Extensions to add AddDbContextFactory
            https://github.com/vany0114/EF.DbContextFactory/blob/master/src/Extensions/EFCore.DbContextFactory/Extensions/ServiceCollectionExtensions.cs
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.ServiceCollectionExtensions.AddDbContextFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder})">
            <summary>
            Configures the resolution of <typeparamref name="TDataContext"/>'s factory.
            </summary>
            <typeparam name="TDataContext">The DbContext.</typeparam>
            <param name="services"></param>
            <param name="options">The DbContext options.</param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.ServiceCollectionExtensions.AddDbContextFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder})">
            <summary>
            Configures the resolution of <typeparamref name="TDataContext"/>'s factory.
            </summary>
            <typeparam name="TDataContext">The DbContext.</typeparam>
            <param name="services"></param>
            <param name="optionsAction">Service provider and DbContext options.</param>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.EntityFrameworkCore.EntityFrameworkCoreServiceExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.EntityFrameworkCoreServiceExtensions.AddEntityFrameworkCoreSqlServer``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.String,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            
            </summary>
            <typeparam name="TContext"></typeparam>
            <param name="services"></param>
            <param name="configuration"></param>
            <param name="connectionStringName"></param>
            <param name="serviceLifetime"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.EntityFrameworkCoreServiceExtensions.AddEntityFrameworkCorePostgreSql``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.String,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Add service PostgreSQL into IServiceCollection
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.EntityFrameworkCoreServiceExtensions.AddCommonDataServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Register common Ef Core data services
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Extensions.DbSetExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Extensions.DbSetExtensions.AddOrNothing``2(Microsoft.EntityFrameworkCore.DbSet{``0},System.Threading.CancellationToken,System.Collections.Generic.List{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="dbSet"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <param name="records"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Queries.EntityFrameworkCoreQueryProvider`1">
            <summary>
            
            </summary>
            <typeparam name="TDbContextBase"></typeparam>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Queries.EntityFrameworkCoreQueryProvider`1.#ctor(SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.IDbContextFactory{`0})">
            <summary>
            
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Queries.EntityFrameworkCoreQueryProvider`1.GetQuery``1(System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="showDeleted"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Queries.EntityFrameworkCoreQueryProvider`1.ToPagedListAsync``2(SharedKernel.Application.Cqrs.Queries.Entities.PageOptions,SharedKernel.Domain.Specifications.Common.ISpecification{``0},SharedKernel.Domain.Specifications.Common.ISpecification{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="pageOptions"></param>
            <param name="domainSpecification"></param>
            <param name="dtoSpecification"></param>
            <param name="selector"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepository`1">
            <summary>
                ENTITY FRAMEWORK CORE REPOSITORY
            </summary>
            <typeparam name="TAggregateRoot">Repository data type</typeparam>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepository`1.#ctor(SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.DbContextBase)">
            <summary>
            
            </summary>
            <param name="dbContextBase"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepository`1.GetQuery(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="tracking"></param>
            <param name="showDeleted"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepository`1.GetAggregate(System.Linq.IQueryable{`0})">
            <summary>
            
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepository`1.GetById``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepository`1.Any">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepository`1.Any``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepository`1.Where(SharedKernel.Domain.Specifications.Common.ISpecification{`0})">
            <summary>
            
            </summary>
            <param name="spec"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepository`1.Single(SharedKernel.Domain.Specifications.Common.ISpecification{`0})">
            <summary>
            
            </summary>
            <param name="spec"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepository`1.SingleOrDefault(SharedKernel.Domain.Specifications.Common.ISpecification{`0})">
            <summary>
            
            </summary>
            <param name="spec"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepository`1.Any(SharedKernel.Domain.Specifications.Common.ISpecification{`0})">
            <summary>
            
            </summary>
            <param name="spec"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepository`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="aggregateRoot"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepository`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="aggregateRoots"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepository`1.Remove(`0)">
            <summary>
            
            </summary>
            <param name="aggregateRoot"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepository`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="aggregates"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepository`1.Update(`0)">
            <summary>
            
            </summary>
            <param name="aggregateRoot"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepository`1.UpdateRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="aggregates"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepository`1.Rollback">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepository`1.SaveChanges">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepositoryAsync`1">
            <summary>
                ENTITY FRAMEWORK CORE REPOSITORY
            </summary>
            <typeparam name="TAggregateRoot">Repository data type</typeparam>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepositoryAsync`1.#ctor(SharedKernel.Infrastructure.Data.EntityFrameworkCore.DbContexts.DbContextBase)">
            <summary>
            
            </summary>
            <param name="dbContextBase"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepositoryAsync`1.GetByIdAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="key"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepositoryAsync`1.GetDeleteByIdAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="key"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepositoryAsync`1.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepositoryAsync`1.AnyAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepositoryAsync`1.CountAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepositoryAsync`1.AnyAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="key"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepositoryAsync`1.WhereAsync(SharedKernel.Domain.Specifications.Common.ISpecification{`0},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="spec"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepositoryAsync`1.SingleAsync(SharedKernel.Domain.Specifications.Common.ISpecification{`0},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="spec"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepositoryAsync`1.SingleOrDefaultAsync(SharedKernel.Domain.Specifications.Common.ISpecification{`0},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="spec"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepositoryAsync`1.AnyAsync(SharedKernel.Domain.Specifications.Common.ISpecification{`0},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="spec"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepositoryAsync`1.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="aggregateRoot"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepositoryAsync`1.AddRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="aggregates"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepositoryAsync`1.RemoveAsync(`0,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="aggregateRoot"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepositoryAsync`1.RemoveRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="aggregates"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepositoryAsync`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="aggregateRoot"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepositoryAsync`1.UpdateRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="aggregates"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepositoryAsync`1.RollbackAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.EntityFrameworkCore.Repositories.EntityFrameworkCoreRepositoryAsync`1.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.FileSystem.DirectoryRepositoryAsync">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.DirectoryRepositoryAsync.#ctor(SharedKernel.Application.UnitOfWorks.IFileSystemUnitOfWorkAsync)">
            <summary>
            
            </summary>
            <param name="unitOfWork"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.DirectoryRepositoryAsync.AddAsync(SharedKernel.Domain.Entities.DirectoryEntity,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="directory"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.DirectoryRepositoryAsync.GetFilesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.DirectoryRepositoryAsync.GetFilesEntitiesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.DirectoryRepositoryAsync.GetFileNamesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.DirectoryRepositoryAsync.ExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.FileSystem.FileRepositoryAsync">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.FileRepositoryAsync.#ctor(SharedKernel.Application.UnitOfWorks.IFileSystemUnitOfWorkAsync)">
            <summary>
            
            </summary>
            <param name="unitOfWork"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.FileRepositoryAsync.ReadAllLinesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.FileRepositoryAsync.ReadAllBytesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.FileRepositoryAsync.ExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.FileRepositoryAsync.AddAsync(SharedKernel.Domain.Entities.FileEntity,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="file"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.FileRepositoryAsync.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.FileRepositoryAsync.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.FileRepositoryAsync.CopyAsync(SharedKernel.Domain.Entities.FileEntity,SharedKernel.Domain.Entities.FileEntity,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="sourceFile"></param>
            <param name="destFile"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.FileRepositoryAsync.MoveAsync(SharedKernel.Domain.Entities.FileEntity,SharedKernel.Domain.Entities.FileEntity,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="sourceFile"></param>
            <param name="destFile"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.FileSystem.FileSystemServiceExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.FileSystemServiceExtensions.AddFileSystemUnitOfWork(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.FileSystem.Repositories.FileSystemRepository`2">
            <summary>
            
            </summary>
            <typeparam name="TAggregateRoot"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="F:SharedKernel.Infrastructure.Data.FileSystem.Repositories.FileSystemRepository`2.FilePath">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.Repositories.FileSystemRepository`2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.Repositories.FileSystemRepository`2.FileName(System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.Repositories.FileSystemRepository`2.Add(`0)">
            <summary>
            
            </summary>
            <param name="aggregate"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.Repositories.FileSystemRepository`2.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="aggregates"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.Repositories.FileSystemRepository`2.GetById``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.Repositories.FileSystemRepository`2.Rollback">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.Repositories.FileSystemRepository`2.SaveChanges">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.FileSystem.Repositories.FileSystemRepositoryAsync`2">
            <summary>
            
            </summary>
            <typeparam name="TAggregateRoot"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.Repositories.FileSystemRepositoryAsync`2.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="aggregate"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.Repositories.FileSystemRepositoryAsync`2.AddRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="aggregates"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.FileSystem.UnitOfWorks.FileSystemUnitOfWork">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharedKernel.Infrastructure.Data.FileSystem.UnitOfWorks.FileSystemUnitOfWork.Directories">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharedKernel.Infrastructure.Data.FileSystem.UnitOfWorks.FileSystemUnitOfWork.Files">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.UnitOfWorks.FileSystemUnitOfWork.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.UnitOfWorks.FileSystemUnitOfWork.RollbackAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.UnitOfWorks.FileSystemUnitOfWork.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.UnitOfWorks.FileSystemUnitOfWork.Rollback">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.FileSystem.UnitOfWorks.FileSystemUnitOfWork.SaveChanges">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.IPopulateDatabase">
             <summary>
             <example>
             Sample usage:
             <code>
             public virtual async Task Populate(CancellationToken cancellationToken)
             {
                 if (_dbContext.Database.IsSqlServer())
                     await _dbContext.Database.MigrateAsync();
            
                 _dbContext.Set&lt;Entity&gt;().AddOrNothing(new Entity());
                 _connection.Execute("INSERT INTO Entity VALUES (1)");
             </code>
             </example>
             </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.IPopulateDatabase.Populate(System.Threading.CancellationToken)">
             <summary>
             <example>
             Sample usage:
             <code>
             public virtual async Task Populate(CancellationToken cancellationToken)
             {
                 if (_dbContext.Database.IsSqlServer())
                     await _dbContext.Database.MigrateAsync();
            
                 _dbContext.Set&lt;Entity&gt;().AddOrNothing(new Entity());
                 _connection.Execute("INSERT INTO Entity VALUES (1)");
             </code>
             </example>
             </summary>
             <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
             <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.Mongo.MongoServiceExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Mongo.MongoServiceExtensions.AddMongo(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.Mongo.MongoSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.Data.Mongo.MongoSettings.ConnectionString">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.Data.Mongo.MongoSettings.Database">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.Mongo.Queries.MongoQueryProvider">
            <summary>
            Query provider for Mongo database
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Mongo.Queries.MongoQueryProvider.#ctor(Microsoft.Extensions.Options.IOptions{SharedKernel.Infrastructure.Data.Mongo.MongoSettings})">
            <summary>
            
            </summary>
            <param name="mongoSettings"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Mongo.Queries.MongoQueryProvider.GetQuery``1(MongoDB.Driver.AggregateOptions)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.Mongo.Repositories.MongoRepository`2">
            <summary>
            
            </summary>
            <typeparam name="TAggregateRoot"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="F:SharedKernel.Infrastructure.Data.Mongo.Repositories.MongoRepository`2.MongoCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Mongo.Repositories.MongoRepository`2.#ctor(Microsoft.Extensions.Options.IOptions{SharedKernel.Infrastructure.Data.Mongo.MongoSettings})">
            <summary>
            
            </summary>
            <param name="mongoSettings"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Mongo.Repositories.MongoRepository`2.ToBsonDocument(System.String)">
            <summary>
            
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Mongo.Repositories.MongoRepository`2.ToBsonArray(System.String)">
            <summary>
            
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Mongo.Repositories.MongoRepository`2.Add(`0)">
            <summary>
            
            </summary>
            <param name="aggregate"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Mongo.Repositories.MongoRepository`2.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="aggregates"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Mongo.Repositories.MongoRepository`2.GetById``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Mongo.Repositories.MongoRepository`2.Any">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Mongo.Repositories.MongoRepository`2.Any``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Mongo.Repositories.MongoRepository`2.Update(`0)">
            <summary>
            
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Mongo.Repositories.MongoRepository`2.UpdateRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="aggregates"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Mongo.Repositories.MongoRepository`2.Remove(`0)">
            <summary>
            
            </summary>
            <param name="aggregate"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Mongo.Repositories.MongoRepository`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="aggregate"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Mongo.Repositories.MongoRepository`2.Where(SharedKernel.Domain.Specifications.Common.ISpecification{`0})">
            <summary>
            
            </summary>
            <param name="spec"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Mongo.Repositories.MongoRepository`2.Single(SharedKernel.Domain.Specifications.Common.ISpecification{`0})">
            <summary>
            
            </summary>
            <param name="spec"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Mongo.Repositories.MongoRepository`2.SingleOrDefault(SharedKernel.Domain.Specifications.Common.ISpecification{`0})">
            <summary>
            
            </summary>
            <param name="spec"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Mongo.Repositories.MongoRepository`2.Any(SharedKernel.Domain.Specifications.Common.ISpecification{`0})">
            <summary>
            
            </summary>
            <param name="spec"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Mongo.Repositories.MongoRepository`2.Rollback">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Mongo.Repositories.MongoRepository`2.SaveChanges">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.Mongo.Repositories.MongoRepositoryAsync`2">
            <summary>
            
            </summary>
            <typeparam name="TAggregateRoot"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Mongo.Repositories.MongoRepositoryAsync`2.#ctor(Microsoft.Extensions.Options.IOptions{SharedKernel.Infrastructure.Data.Mongo.MongoSettings})">
            <summary>
            
            </summary>
            <param name="mongoSettings"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Mongo.Repositories.MongoRepositoryAsync`2.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="aggregate"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Mongo.Repositories.MongoRepositoryAsync`2.AddRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="aggregates"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Mongo.Repositories.MongoRepositoryAsync`2.RollbackAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Mongo.Repositories.MongoRepositoryAsync`2.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.Redis.Repositories.RedisRepository`2">
            <summary>
            
            </summary>
            <typeparam name="TAggregateRoot"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="F:SharedKernel.Infrastructure.Data.Redis.Repositories.RedisRepository`2.DistributedCache">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharedKernel.Infrastructure.Data.Redis.Repositories.RedisRepository`2.BinarySerializer">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharedKernel.Infrastructure.Data.Redis.Repositories.RedisRepository`2.AggregateName">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Redis.Repositories.RedisRepository`2.#ctor(Microsoft.Extensions.Caching.Distributed.IDistributedCache,SharedKernel.Application.Serializers.IBinarySerializer)">
            <summary>
            
            </summary>
            <param name="distributedCache"></param>
            <param name="binarySerializer"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Redis.Repositories.RedisRepository`2.GetById``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Redis.Repositories.RedisRepository`2.Any">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Redis.Repositories.RedisRepository`2.Any``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Redis.Repositories.RedisRepository`2.Update(`0)">
            <summary>
            
            </summary>
            <param name="aggregate"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Redis.Repositories.RedisRepository`2.UpdateRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="aggregates"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Redis.Repositories.RedisRepository`2.Rollback">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Redis.Repositories.RedisRepository`2.SaveChanges">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.Redis.Repositories.RedisRepositoryAsync`2">
            <summary>
            
            </summary>
            <typeparam name="TAggregateRoot"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Redis.Repositories.RedisRepositoryAsync`2.#ctor(Microsoft.Extensions.Caching.Distributed.IDistributedCache,SharedKernel.Application.Serializers.IBinarySerializer)">
            <summary>
            
            </summary>
            <param name="distributedCache"></param>
            <param name="binarySerializer"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Redis.Repositories.RedisRepositoryAsync`2.RollbackAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Redis.Repositories.RedisRepositoryAsync`2.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.Transactions.ModuleTransactionAsync">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Transactions.ModuleTransactionAsync.Begin">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Transactions.ModuleTransactionAsync.End">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Transactions.ModuleTransactionAsync.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Transactions.ModuleTransactionAsync.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Transactions.ModuleTransactionAsync.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedKernel.Infrastructure.Data.Transactions.ModuleTransactionServiceExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Data.Transactions.ModuleTransactionServiceExtensions.AddTransactions(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Events.DomainEventExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.DomainEventExtensions.ToPrimitives(SharedKernel.Domain.Events.DomainEvent)">
            <summary>
            
            </summary>
            <param name="domainEvent"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Events.DomainEventsInformation">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.DomainEventsInformation.Register(System.Reflection.Assembly)">
            <summary>
            
            </summary>
            <param name="domainAssembly"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.DomainEventsInformation.ForName(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Events.DomainEventJsonDeserializer">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.DomainEventJsonDeserializer.Deserialize(System.String)">
            <summary>
            
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Events.DomainEventJsonSerializer">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.DomainEventJsonSerializer.Serialize(SharedKernel.Domain.Events.DomainEvent)">
            <summary>
            
            </summary>
            <param name="domainEvent"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Events.DomainEventMediator">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.DomainEventMediator.#ctor(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
            
            </summary>
            <param name="serviceScopeFactory"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.DomainEventMediator.ExecuteOn(SharedKernel.Domain.Events.DomainEvent,System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="event"></param>
            <param name="eventSubscriber"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Events.DomainEventSubscriberInformation">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.Events.DomainEventSubscriberInformation.SubscribedEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.DomainEventSubscriberInformation.#ctor(System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="subscriberClass"></param>
            <param name="subscribedEvent"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.DomainEventSubscriberInformation.SubscriberName">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Events.DomainEventSubscriberInformationService">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.DomainEventSubscriberInformationService.Register(System.Collections.Generic.Dictionary{System.Type,SharedKernel.Infrastructure.Events.DomainEventSubscriberInformation})">
            <summary>
            
            </summary>
            <param name="information"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.DomainEventSubscriberInformationService.All">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.DomainEventSubscriberInformationService.GetAllEventsSubscribers">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.DomainEventSubscriberInformationService.GetAllEventsSubscribers(SharedKernel.Domain.Events.DomainEvent)">
            <summary>
            
            </summary>
            <param name="event"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.DomainEventSubscriberInformationService.AddDomainEventSubscribers(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Call just before compiling service collections
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.DomainEventSubscriberInformationService.AddDomainEventsSubscribers(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.DomainEventSubscriberInformationService.AddDomainEventsSubscribers(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Events.EventBusServiceExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.EventBusServiceExtensions.AddDomainEvents(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <param name="eventType"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.EventBusServiceExtensions.AddDomainEvents(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <param name="domainAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.EventBusServiceExtensions.AddInMemoryEventBus(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Nullable{System.TimeSpan})">
            <summary>
            
            </summary>
            <param name="services"></param>
            <param name="delayTimeSpan">Delay TimeSpan to execute domain events queue. Default 50ms</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.EventBusServiceExtensions.AddRabbitMqEventBus(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.EventBusServiceExtensions.AddRedisEventBus(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Events.InMemory.DomainEventsToExecute">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharedKernel.Infrastructure.Events.InMemory.DomainEventsToExecute._subscribers">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.InMemory.DomainEventsToExecute.#ctor(SharedKernel.Application.Logging.ICustomLogger{SharedKernel.Infrastructure.Events.InMemory.DomainEventsToExecute},System.TimeSpan)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.InMemory.DomainEventsToExecute.Add(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.InMemory.DomainEventsToExecute.ExecuteAll(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedKernel.Infrastructure.Events.InMemory.InMemoryBackgroundService">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.InMemory.InMemoryBackgroundService.#ctor(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
            
            </summary>
            <param name="serviceScopeFactory"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.InMemory.InMemoryBackgroundService.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="stoppingToken"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Events.MsSql.MsSqlEventBus">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.MsSql.MsSqlEventBus.#ctor(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            
            </summary>
            <param name="eventContext"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.MsSql.MsSqlEventBus.Publish(System.Collections.Generic.List{SharedKernel.Domain.Events.DomainEvent},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="events"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.MsSql.MsSqlEventBus.Publish(SharedKernel.Domain.Events.DomainEvent,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="domainEvent"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqConfigParams">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqConfigParams.Username">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqConfigParams.Password">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqConfigParams.HostName">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqConfigParams.ExchangeName">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqConfigParams.Port">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqConnectionFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqConnectionFactory.#ctor(Microsoft.Extensions.Options.IOptions{SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqConfigParams})">
            <summary>
            
            </summary>
            <param name="rabbitMqParams"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqConnectionFactory.Connection">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqConnectionFactory.Channel">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqDomainEventsConsumer">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqDomainEventsConsumer.#ctor(SharedKernel.Infrastructure.Events.DomainEventJsonDeserializer,SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqConnectionFactory,SharedKernel.Infrastructure.Events.DomainEventMediator,SharedKernel.Application.Logging.ICustomLogger{SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqDomainEventsConsumer},Microsoft.Extensions.Options.IOptions{SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqConfigParams})">
            <summary>
            
            </summary>
            <param name="deserializer"></param>
            <param name="config"></param>
            <param name="domainEventMediator"></param>
            <param name="logger"></param>
            <param name="rabbitMqParams"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqDomainEventsConsumer.Consume">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqEventBus">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqEventBus.#ctor(SharedKernel.Infrastructure.Events.DomainEventJsonSerializer,SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqConnectionFactory,SharedKernel.Infrastructure.Cqrs.Middlewares.ExecuteMiddlewaresService,Microsoft.Extensions.Options.IOptions{SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqConfigParams})">
            <summary>
            
            </summary>
            <param name="domainEventJsonSerializer"></param>
            <param name="config"></param>
            <param name="executeMiddlewaresService"></param>
            <param name="rabbitMqParams"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqEventBus.Publish(System.Collections.Generic.List{SharedKernel.Domain.Events.DomainEvent},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="events"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqEventBus.Publish(SharedKernel.Domain.Events.DomainEvent,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="event"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqEventBusConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqEventBusConfiguration.#ctor(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
            
            </summary>
            <param name="serviceScopeFactory"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqEventBusConfiguration.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="stoppingToken"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqExchangeNameFormatter">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqExchangeNameFormatter.Retry(System.String)">
            <summary>
            
            </summary>
            <param name="exchangeName"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqExchangeNameFormatter.DeadLetter(System.String)">
            <summary>
            
            </summary>
            <param name="exchangeName"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqQueueNameFormatter">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqQueueNameFormatter.Format(SharedKernel.Infrastructure.Events.DomainEventSubscriberInformation)">
            <summary>
            
            </summary>
            <param name="information"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqQueueNameFormatter.FormatRetry(SharedKernel.Infrastructure.Events.DomainEventSubscriberInformation)">
            <summary>
            
            </summary>
            <param name="information"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.RabbitMq.RabbitMqQueueNameFormatter.FormatDeadLetter(SharedKernel.Infrastructure.Events.DomainEventSubscriberInformation)">
            <summary>
            
            </summary>
            <param name="information"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Events.Redis.RedisDomainEventsConsumer">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.Redis.RedisDomainEventsConsumer.#ctor(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
            
            </summary>
            <param name="serviceScopeFactory"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.Redis.RedisDomainEventsConsumer.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="stoppingToken"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Events.Redis.RedisEventBus">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.Redis.RedisEventBus.#ctor(StackExchange.Redis.IConnectionMultiplexer,SharedKernel.Infrastructure.Cqrs.Middlewares.ExecuteMiddlewaresService,SharedKernel.Infrastructure.Events.DomainEventJsonSerializer)">
            <summary>
            
            </summary>
            <param name="connectionMultiplexer"></param>
            <param name="executeMiddlewaresService"></param>
            <param name="domainEventJsonSerializer"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.Redis.RedisEventBus.Publish(System.Collections.Generic.List{SharedKernel.Domain.Events.DomainEvent},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="events"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Events.Redis.RedisEventBus.Publish(SharedKernel.Domain.Events.DomainEvent,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="event"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Exceptions.ExceptionCodes">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.Exceptions.ExceptionCodes.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.Exceptions.ExceptionCodes.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.Exceptions.ExceptionCodes.EF_CORE_SAVE_CHANGES">
            <summary>
              Looks up a localized string similar to Problem saving changes..
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.Exceptions.ExceptionCodes.EMAIL_ATTACH_EXT">
            <summary>
              Looks up a localized string similar to Attachment required..
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.Exceptions.ExceptionCodes.REDIS_UPDATE">
            <summary>
              Looks up a localized string similar to Error in redis update operation..
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.Exceptions.ExceptionCodes.SMT_PASS_EMPTY">
            <summary>
              Looks up a localized string similar to Smtp password required..
            </summary>
        </member>
        <member name="T:SharedKernel.Infrastructure.Exceptions.SharedKernelInfrastructureException">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Exceptions.SharedKernelInfrastructureException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Exceptions.SharedKernelInfrastructureException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:SharedKernel.Infrastructure.HealthChecks.AddSharedKernelHealthChecksExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.HealthChecks.AddSharedKernelHealthChecksExtensions.AddSharedKernelHealthChecks(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/blob/master/src/HealthChecks.System/DependencyInjection/SystemHealthCheckBuilderExtensions.cs
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.HealthChecks.CpuHealthCheck">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.HealthChecks.CpuHealthCheck.#ctor(SharedKernel.Application.Logging.ICustomLogger{SharedKernel.Infrastructure.HealthChecks.CpuHealthCheck})">
            <summary>
            
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.HealthChecks.CpuHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.HealthChecks.PingHealthCheck">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.HealthChecks.PingHealthCheck.#ctor(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="host"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.HealthChecks.PingHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.HealthChecks.RamHealthCheck">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.HealthChecks.RamHealthCheck.#ctor(SharedKernel.Application.Logging.ICustomLogger{SharedKernel.Infrastructure.HealthChecks.RamHealthCheck})">
            <summary>
            
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.HealthChecks.RamHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Logging.DefaultCustomLogger`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SharedKernel.Infrastructure.Logging.DefaultCustomLogger`1.#ctor(Microsoft.Extensions.Logging.ILogger{`0})">
            <summary>
            
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Logging.DefaultCustomLogger`1.Verbose(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Logging.DefaultCustomLogger`1.Debug(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Logging.DefaultCustomLogger`1.Info(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Logging.DefaultCustomLogger`1.Warn(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Logging.DefaultCustomLogger`1.Warn(System.Exception,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="exception"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Logging.DefaultCustomLogger`1.Error(System.Exception,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="exception"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Logging.DefaultCustomLogger`1.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="exception"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="T:SharedKernel.Infrastructure.Logging.DefaultCustomLogger">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Logging.DefaultCustomLogger.#ctor(Microsoft.Extensions.Logging.ILogger{SharedKernel.Infrastructure.Logging.DefaultCustomLogger})">
            <summary>
            
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Logging.DefaultCustomLogger.Verbose(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Logging.DefaultCustomLogger.Debug(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Logging.DefaultCustomLogger.Info(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Logging.DefaultCustomLogger.Warn(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Logging.DefaultCustomLogger.Warn(System.Exception,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="exception"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Logging.DefaultCustomLogger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="exception"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Logging.DefaultCustomLogger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="exception"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="T:SharedKernel.Infrastructure.Reporting.ReportRenderer">
            <summary>
            SQL Server Reporting Services report renderer (rdlc extension)
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Reporting.ReportRenderer.#ctor(SharedKernel.Application.Logging.ICustomLogger{SharedKernel.Infrastructure.Reporting.ReportRenderer})">
            <summary>
            
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Reporting.ReportRenderer.RenderRdlc(System.String,SharedKernel.Application.Reporting.ExportReportType,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Render a rdlc (SQL Server Reporting Services)
            </summary>
            <param name="reportPath">Absolute file path</param>
            <param name="exportReportType">Export file extension</param>
            <param name="parameters">Report parameters</param>
            <param name="dataSources">Report datasources</param>
            <returns>Array file contents</returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Security.Cryptography.Base64">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Security.Cryptography.Base64.EncodeTo64(System.String)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Security.Cryptography.Base64.DecodeFrom64(System.String)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Security.Cryptography.EncryptionHexHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Security.Cryptography.EncryptionHexHelper.StringToByteArrayFastest(System.String)">
            <summary>
                Function to get the bytes of a text string in hex
                <param name="hex">Text with hex to pass to bytes</param>
                <returns>Byte array with the hexadecimal string value</returns>
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Security.Cryptography.EncryptionHexHelper.GetHexVal(System.Char)">
            <summary>
                Function to get the integer value of a hex character
                <param name="hex">Hexadecimal character to pass to int</param>
                <returns>Int with the character value</returns>
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Security.Cryptography.EncryptionHexHelper.Encrypt(System.String)">
            <summary>
                Function for Text String Encryption
                <param name="text">Text to encrypt</param>
                <returns>Encrypted string</returns>
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Security.Cryptography.EncryptionHexHelper.Decrypt(System.String)">
            <summary>
                Function for Decrypting Text Strings
                <param name="text">Text to decrypt</param>
                <returns>Decrypted string</returns>
            </summary>
        </member>
        <member name="T:SharedKernel.Infrastructure.Security.Cryptography.RandomNumberGenerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Security.Cryptography.RandomNumberGenerator.GetRandom(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Security.Cryptography.SecureHashAlgorithm">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Security.Cryptography.SecureHashAlgorithm.Generate512String(System.String)">
            <summary>
            
            </summary>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Security.Cryptography.SecureHashAlgorithm.Generate512String(System.Byte[])">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Security.Cryptography.SecureHashAlgorithm.Generate256String(System.String)">
            <summary>
            
            </summary>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Security.Cryptography.SecureHashAlgorithm.Generate256String(System.Byte[])">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Security.Cryptography.SecureHashAlgorithm.GetStringFromHash(System.Byte[])">
            <summary>
            
            </summary>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Security.Cryptography.Sha256">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Security.Cryptography.Sha256.HashHmac(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Security.Cryptography.Sha256.GetSignature(System.Byte[],System.String)">
            <summary>
            Get HMAC SHA256 signature with 3DES key
            </summary>
            <param name="tripeDesKey"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Security.Cryptography.TripleDes">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Security.Cryptography.TripleDes.Encrypt(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="textKey"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Security.HttpContextAccessorIdentityService">
            <summary>
            User authentication
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Security.HttpContextAccessorIdentityService.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor,SharedKernel.Application.Logging.ICustomLogger{SharedKernel.Infrastructure.Security.HttpContextAccessorIdentityService})">
            <summary>
            Constructor
            </summary>
            <param name="httpContextAccessor"></param>
            <param name="logger"></param>
        </member>
        <member name="P:SharedKernel.Infrastructure.Security.HttpContextAccessorIdentityService.UserId">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.Security.HttpContextAccessorIdentityService.User">
            <summary>
            User
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Security.HttpContextAccessorIdentityService.IsInRole(System.String)">
            <summary>
            Contains a role
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Security.HttpContextAccessorIdentityService.IsAuthenticated">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharedKernel.Infrastructure.Security.HttpContextAccessorIdentityService.BasePath">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.Security.HttpContextAccessorIdentityService.UserAgent">
            <summary>
            Browser
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.Security.HttpContextAccessorIdentityService.RemoteIpAddress">
            <summary>
            Remote ip address
            </summary>
        </member>
        <member name="T:SharedKernel.Infrastructure.Serializers.BinarySerializer">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Serializers.BinarySerializer.Serialize``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Serializers.BinarySerializer.Deserialize``1(System.Byte[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Serializers.NetJsonSerializer">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Serializers.NetJsonSerializer.Serialize(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Serializers.NetJsonSerializer.Deserialize``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Serializers.NetJsonSerializer.DeserializeAnonymousType``1(System.String,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Serializers.NewtonsoftSerializer">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Serializers.NewtonsoftSerializer.Serialize(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Serializers.NewtonsoftSerializer.Deserialize``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Serializers.NewtonsoftSerializer.DeserializeAnonymousType``1(System.String,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Serializers.SerializersServiceExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Serializers.SerializersServiceExtensions.AddNetJsonSerializer(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Serializers.SerializersServiceExtensions.AddNewtonsoftSerializer(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Settings.OptionsService`1">
            <summary>
            
            </summary>
            <typeparam name="TOptions"></typeparam>
        </member>
        <member name="M:SharedKernel.Infrastructure.Settings.OptionsService`1.#ctor(Microsoft.Extensions.Options.IOptions{`0})">
            <summary>
            
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:SharedKernel.Infrastructure.Settings.OptionsService`1.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedKernel.Infrastructure.System.AddFromAssemblyExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.System.AddFromAssemblyExtensions.AddFromAssembly(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly,System.Type[])">
            <summary>
            
            </summary>
            <param name="services"></param>
            <param name="assembly"></param>
            <param name="genericTypes"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.System.AddFromMatchingInterfaceExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.System.AddFromMatchingInterfaceExtensions.AddFromMatchingInterface(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type[])">
            <summary>
            Register all classes that implement an interface equal to its name in transient mode
            Example: UserService -> IUserService.
            </summary>
            <param name="services"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.System.AddFromMatchingInterfaceExtensions.AddFromMatchingInterface(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.Type,System.Boolean},System.Type[])">
            <summary>
            Register all classes that implement an interface equal to its name in transient mode
            Example: UserService -> IUserService.
            </summary>
            <param name="services"></param>
            <param name="classesInclude"></param>
            <param name="types"></param>
            <returns></returns>
            <exception cref="T:System.ServiceModel.ActionNotSupportedException"></exception>
        </member>
        <member name="T:SharedKernel.Infrastructure.System.EnumExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.System.EnumExtensions.FromEnumToComboListAsync``1">
            <summary>
            
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.System.GuidGenerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.System.GuidGenerator.NewGuid">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.System.GuidGenerator.NewGuid(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.System.MachineDateTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.System.MachineDateTime.UtcNow">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.System.MachineDateTime.MaxValue">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedKernel.Infrastructure.System.StreamHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.System.StreamHelper.ToByteArray(System.IO.Stream)">
            <summary>
            Read the sequence and transform it into bytes
            Source: https://stackoverflow.com/questions/221925/creating-a-byte-array-from-a-stream
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.System.StringHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.System.StringHelper.ToLowerUnderscore(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.System.StringHelper.Replace(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="dataSource"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.System.Threading.CustomSemaphore">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.System.Threading.CustomSemaphore.#ctor(SharedKernel.Application.System.Threading.ISemaphoreStore)">
            <summary>
            
            </summary>
            <param name="semaphoreStore"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.System.Threading.CustomSemaphore.RunOneAtATimeFromGivenKey``1(System.String,System.Func{``0})">
            <summary>
            Create a SemaphoreSlim per key an block threads from given key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="funcion"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.System.Threading.CustomSemaphore.RunOneAtATimeFromGivenKey``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Create a SemaphoreSlim per key an block threads from given key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="funcion"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.System.Threading.InMemorySemaphoreStore">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.System.Threading.InMemorySemaphoreStore.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.System.Threading.InMemorySemaphoreStore.GetOrCreate(System.String)">
            <summary>
            Gets o create a SemaphoreSlim per key (Thread Safe)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.System.Threading.InMemorySemaphoreStore.Remove(System.String)">
            <summary>
            Remove a SemaphoreSlim per key (Thread Safe)
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:SharedKernel.Infrastructure.System.ThreadUiCulture">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.System.ThreadUiCulture.LanguageId">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedKernel.Infrastructure.System.ThreadUiCulture.LanguageSpaId">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedKernel.Infrastructure.System.WebUtils">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.System.WebUtils.HtmlEncode(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.System.WebUtils.HtmlDecode(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.System.WebUtils.UrlEncode(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.System.WebUtils.UrlDecode(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Validators.DefaultValidatorExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Validators.DefaultValidatorExtensions.Uri``1(FluentValidation.IRuleBuilder{``0,System.String})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Validators.DefaultValidatorExtensions.PhoneNumber``1(FluentValidation.IRuleBuilder{``0,System.String})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Validators.FluentValidator`1">
            <inheritdoc />
            <summary>
            Validator based on Data Annotations.
            This validator use IValidatableObject interface and
            ValidationAttribute ( hierarchy of this) for
            perform validation
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Validators.FluentValidator`1.#ctor(FluentValidation.IValidator{`0})">
            <summary>
            
            </summary>
            <param name="validator"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Validators.FluentValidator`1.ValidateList(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Validators.FluentValidator`1.Validate(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:SharedKernel.Infrastructure.Validators.FluentValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Validators.FluentValidatorsExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Validators.FluentValidatorsExtensions.AddValidators(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly)">
            <summary>
            Register all AbstractValidator from library
            </summary>
            <param name="services"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:SharedKernel.Infrastructure.Validators.FluentValidatorsExtensions.AddValidators(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)">
            <summary>
            Register all AbstractValidator from library
            </summary>
            <param name="services"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:SharedKernel.Infrastructure.Validators.PageOptionsValidator">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedKernel.Infrastructure.Validators.PageOptionsValidator.#ctor">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
