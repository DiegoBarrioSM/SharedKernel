# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build-and-test:

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        project: ['test/Domain/SharedKernel.Domain.Tests.csproj', 'test/Application/SharedKernel.Application.Tests.csproj', 'test/Infrastructure/SharedKernel.Integration.Tests.csproj']

    runs-on: ${{ matrix.os }}

    services:

      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        container_name: shared-kernel-sqlserver
        environment:
            - ACCEPT_EULA=Y
            - SA_PASSWORD=yourStrong(!)Password
            - MSSQL_PID=Developer
        ports:
            - 22220:1433
     
      mongo:
        image: mongo:latest
        container_name: shared-kernel-mongo
        ports:
            - 22221:27017

      redis:
        image: redis:latest
        container_name: shared-kernel-redis
        ports:
            - 22222:6379

      rabbitmq:
        image: rabbitmq:latest
        container_name: shared-kernel-rabbitmq
        environment:
            - RABBITMQ_DEFAULT_USER=user
            - RABBITMQ_DEFAULT_PASS=password
        ports:
            - 22223:5672

      smtp:
        image: namshi/smtp:latest
        container_name: shared-kernel-smtp
        ports:
         - "22224:25"
        environment:
            - MAILNAME=smtp.shared-kernel.com
            - SMARTHOST_ADDRESS=smtp.shared-kernel.com
            - SMARTHOST_PORT=587
            - SMARTHOST_USER=shared-kernel@shared-kernel.com
            - SMARTHOST_PASSWORD=shared-kernel
            - SMARTHOST_ALIASES=*.shared-kernel.com
            
      postgres:
        image: postgres:latest
        container_name: shared-kernel-postgres
        environment:
            POSTGRES_USER: sa
            POSTGRES_PASSWORD: yourStrong(!)Password
        ports:
            - 22225:5432

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: |
        for project in ${{ matrix.project }}; do
          dotnet test $project --configuration Release
        done
